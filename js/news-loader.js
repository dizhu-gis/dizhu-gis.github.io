// News Loader for GeoDI Lab - Reads from GitHub Actions generated JSON
class NewsLoader {
    constructor() {
        this.newsContainer = document.querySelector('.news-list');
        this.loadingElement = document.querySelector('.loading-news');
        this.errorElement = document.querySelector('.news-error');
        this.maxNewsItems = 3;
        this.newsDataUrl = 'data/latest-news.json';
    }

    async loadNews() {
        try {
            // Show loading state
            this.showLoading();
            
            // Fetch news from JSON file (generated by GitHub Actions)
            const newsItems = await this.fetchNewsFromJSON();
            
            // Display the news
            this.displayNews(newsItems);
            
        } catch (error) {
            console.error('Error loading news:', error);
            // Fallback to static data if JSON fetch fails
            const fallbackNews = this.getFallbackNews();
            this.displayNews(fallbackNews);
        }
    }

    extractFirstParagraph(text) {
        if (!text) return '';
        
        console.log('=== EXTRACTING FIRST PARAGRAPH ===');
        console.log('Original text:', text);
        
        // Remove extra whitespace and newlines
        let cleanText = text.replace(/\s+/g, ' ').trim();
        console.log('After whitespace cleanup:', cleanText);
        
        // The content structure is: "Title\nauthor\ndate\n\n\n\n\n\n  \n    \n      \n        \n          \n\n\n  \n    \n      \n            Actual content..."
        // We need to find the actual content that starts after all the metadata and formatting
        
        // Look for the pattern that indicates the start of actual content
        // The actual content usually starts with "            " (lots of spaces) followed by text
        const contentMatch = cleanText.match(/\s{12,}([^.!?]+[.!?])/);
        
        if (contentMatch) {
            let content = contentMatch[1].trim();
            console.log('Found content with spaces pattern:', content);
            
            // Limit length
            if (content.length > 200) {
                content = content.substring(0, 200) + '...';
            }
            
            console.log('Final extracted paragraph:', content);
            console.log('=== END EXTRACTION ===');
            return content;
        }
        
        // Fallback: try to find any substantial content after metadata
        const lines = cleanText.split(' ');
        let startIndex = 0;
        
        // Skip the first few words (title, author, date)
        for (let i = 0; i < lines.length; i++) {
            const word = lines[i];
            // Look for the start of actual content (usually after lots of whitespace/formatting)
            if (word.length > 20 && word.includes('research') || word.includes('article') || word.includes('paper')) {
                startIndex = i;
                break;
            }
        }
        
        let content = lines.slice(startIndex).join(' ').trim();
        
        // Find the first sentence
        const firstSentenceMatch = content.match(/^([^.!?]+[.!?])/);
        if (firstSentenceMatch) {
            content = firstSentenceMatch[1].trim();
        } else {
            content = content.substring(0, 200).trim();
        }
        
        // Limit length
        if (content.length > 200) {
            content = content.substring(0, 200) + '...';
        }
        
        console.log('Final extracted paragraph (fallback):', content);
        console.log('=== END EXTRACTION ===');
        
        return content;
    }

    async fetchNewsFromJSON() {
        try {
            // Add more aggressive cache-busting parameters
            const timestamp = Date.now();
            const random = Math.random();
            const urlWithCacheBust = `${this.newsDataUrl}?_t=${timestamp}&_r=${random}`;
            console.log('Fetching news from JSON file:', urlWithCacheBust);
            
            const response = await fetch(urlWithCacheBust, {
                method: 'GET',
                headers: {
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': '0'
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            console.log('JSON data received:', data);
            console.log('Raw JSON content:', JSON.stringify(data, null, 2));
            
            if (!data.items || data.items.length === 0) {
                throw new Error('No items found in JSON data');
    }

            console.log('=== JSON FETCH SUCCESSFUL ===');
            console.log('Total items from JSON:', data.items.length);
            console.log('Last updated:', data.last_updated);
            console.log('All titles:', data.items.map(item => item.title));
            
            // Convert JSON format to our format
            const newsItems = data.items.map((item, index) => {
                console.log(`Processing JSON item ${index + 1}:`, item);
                console.log(`Raw item title: "${item.title}"`);
                
                const title = item.title || '';
                const description = item.description || ''; // Use description directly from JSON
                const url = item.url || '';
                const pubDate = item.date || '';
                
                console.log(`Using description directly from JSON: "${description}"`);
                
                // Format the date
                const formattedDate = this.formatDate(pubDate);
                
                console.log(`Processed JSON item ${index + 1}: "${title}"`);
                
                return {
                    title: title,
                    description: description,
                    date: formattedDate,
                    url: url
                };
            });
            
            console.log(`Converted ${newsItems.length} items from JSON`);
            
            // Return top 3 items
            const topNews = newsItems.slice(0, this.maxNewsItems);
            console.log(`Returning top ${topNews.length} news items:`, topNews.map(item => item.title));
            
            return topNews;
            
        } catch (error) {
            console.error('=== JSON FETCH FAILED ===');
            console.error('Error:', error.message);
            throw error; // Let the main loadNews function handle fallback
        }
    }

    formatDate(dateString) {
        try {
            const date = new Date(dateString);
            const now = new Date();
            const diffTime = Math.abs(now - date);
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            
            if (diffDays === 1) {
                return 'Today';
            } else if (diffDays === 2) {
                return 'Yesterday';
            } else if (diffDays <= 7) {
                return `${diffDays - 1} days ago`;
            } else {
                return date.toLocaleDateString('en-US', { 
                    month: 'short', 
                    day: 'numeric',
                    year: date.getFullYear() !== now.getFullYear() ? 'numeric' : undefined
                });
            }
        } catch (error) {
            return 'Recent';
        }
    }

    getFallbackNews() {
        console.log('Using fallback news data (3 items)');
        
        // Fallback data if JSON fetch fails
        const newsData = [
            {
                title: "Deep panel flow inference paper published on IJGIS",
                description: "GeoDI lab's recent research article, introducing a gravity-informed Deep Spatial Evolution Network (DSEN) to infer panel spatial flows, has been published in the International Journal of Geographical Information Science.",
                date: "Recent",
                url: "https://geodi.umn.edu/deep-panel-flow-inference-paper-published-ijgis"
            },
            {
                title: "The Weather-Informed Mobility Network (WIMN) paper is published on IJGIS",
                description: "Latest research on Weather-Informed Mobility Network (WIMN) has been published in the International Journal of Geographical Information Science, showcasing innovative approaches to understanding mobility patterns in relation to weather conditions.",
                date: "Recent",
                url: "https://geodi.umn.edu/weather-informed-mobility-network-wimn-paper-published-ijgis"
            },
            {
                title: "The new 'visitor-census' article is published on Scientific Data",
                description: "New research article on visitor-census methodology has been published in Scientific Data, presenting innovative approaches to census data collection and analysis.",
                date: "Recent",
                url: "https://geodi.umn.edu/new-visitor-census-article-published-scientific-data"
            }
        ];

        console.log(`Fallback news: returning ${newsData.length} items`);
        return newsData;
    }

    displayNews(newsItems) {
        if (!this.newsContainer) {
            console.error('News container not found!');
            return;
        }

        console.log(`=== DISPLAYING NEWS ===`);
        console.log(`Displaying ${newsItems.length} news items`);
        console.log('News items to display:', newsItems);
        console.log('Titles to display:', newsItems.map(item => item.title));

        // Clear existing content
        this.newsContainer.innerHTML = '';

        // Create news items
        newsItems.forEach((news, index) => {
            console.log(`Creating news element ${index + 1}: "${news.title}"`);
            const newsElement = this.createNewsElement(news);
            this.newsContainer.appendChild(newsElement);
        });

        console.log(`Successfully displayed ${newsItems.length} news items`);
        console.log(`=== DISPLAY COMPLETE ===`);

        // Hide loading
        this.hideLoading();
    }

    createNewsElement(news) {
        const newsItem = document.createElement('div');
        newsItem.className = 'news-item';
        
        // Clean and truncate the description for display
        const cleanDescription = this.cleanHtmlTags(news.description);
        
        // Remove the indicator text - no longer showing the green text
        const dataIndicator = '';
        
        newsItem.innerHTML = `
            <div class="news-date">${news.date}</div>
            <div class="news-content">
                <h4>${news.title}</h4>
                <p>${cleanDescription}</p>
                ${dataIndicator}
            </div>
        `;

        // Add click handler to open the news URL
        newsItem.style.cursor = 'pointer';
        newsItem.addEventListener('click', () => {
            window.open(news.url, '_blank');
        });

        return newsItem;
    }

    cleanHtmlTags(htmlString) {
        // Remove HTML tags and decode HTML entities
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = htmlString;
        
        // Get text content and clean it up
        let text = tempDiv.textContent || tempDiv.innerText || '';
        
        // Decode HTML entities
        text = this.decodeHtmlEntities(text);
        
        // Remove extra whitespace and newlines
        text = text.replace(/\s+/g, ' ').trim();
        
        // Limit length for display
        if (text.length > 120) {
            text = text.substring(0, 120) + '...';
        }
        
        return text;
    }

    decodeHtmlEntities(text) {
        const textarea = document.createElement('textarea');
        textarea.innerHTML = text;
        return textarea.value;
    }

    showLoading() {
        if (this.loadingElement) {
            this.loadingElement.style.display = 'block';
        }
        if (this.newsContainer) {
            this.newsContainer.style.display = 'none';
        }
    }

    hideLoading() {
        if (this.loadingElement) {
            this.loadingElement.style.display = 'none';
        }
        if (this.newsContainer) {
            this.newsContainer.style.display = 'grid';
        }
    }

    showError() {
        this.hideLoading();
        if (this.errorElement) {
            this.errorElement.style.display = 'block';
        }
    }
}

// Initialize news loader when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    const newsLoader = new NewsLoader();
    newsLoader.loadNews();
});